import 'package:flutter/material.dart';
import '../models/status_record.dart';
import '../services/database_helper.dart';

class StatusSurveyPage extends StatefulWidget {
  const StatusSurveyPage({super.key});

  @override
  State<StatusSurveyPage> createState() => _StatusSurveyPageState();
}

class _StatusSurveyPageState extends State<StatusSurveyPage> {
  final _formKey = GlobalKey<FormState>();

  // Controllers for text fields
  final _dietController = TextEditingController();
  final _notesController = TextEditingController();
  final _sleepAbnormalitiesController = TextEditingController(); // 新增

  // State for single choice questions
  String? _sleepTime;
  String? _wakeUpTime;
  String? _timeToFallAsleep;
  String? _timeToGetUp;

  // State for sliders - now all ratings are doubles
  double? _sleepQuality;
  double? _laeStatus;
  double? _exerciseStatus;
  double? _researchStatus;
  double? _anxietyLevel;
  double? _overallStatus;

  @override
  void dispose() {
    // Clean up the controllers when the widget is disposed.
    _dietController.dispose();
    _notesController.dispose();
    _sleepAbnormalitiesController.dispose(); // 新增
    super.dispose();
  }

  Future<void> _submitSurvey() async {
    // Create a StatusRecord object from the form data.
    final record = StatusRecord(
      // id will be auto-generated by the database
      recordTime: DateTime.now(),
      sleepTime: _sleepTime,
      wakeUpTime: _wakeUpTime,
      sleepQuality: _sleepQuality,
      laeState: _laeStatus,
      exerciseState: _exerciseStatus,
      researchState: _researchStatus,
      dietInfo: _dietController.text,
      anxietyLevel: _anxietyLevel,
      overallState: _overallStatus,
      remarks: _notesController.text,
      // 新增字段
      timeToFallAsleep: _timeToFallAsleep,
      timeToGetUp: _timeToGetUp,
      sleepAbnormalities: _sleepAbnormalitiesController.text,
    );

    // Save to the local database
    await DatabaseHelper().insertStatusRecord(record);

    // Show a confirmation message and navigate back
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('记录已保存')),
      );
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('每日状态问卷'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            _buildChoiceGroup(
              '昨晚睡着时间',
              ['-2300', '2300-2330', '2330-0000', '0000-0100', '0100-'],
              _sleepTime,
              (value) => setState(() => _sleepTime = value),
            ),
            _buildChoiceGroup(
              '今早离开床的时间',
              ['-0730', '0730-0800', '0800-0830', '0830-0900', '0900-'],
              _wakeUpTime,
              (value) => setState(() => _wakeUpTime = value),
            ),
            _buildChoiceGroup(
              '昨夜入睡用时',
              ['-20min', '20-60min', '60min+'],
              _timeToFallAsleep,
              (value) => setState(() => _timeToFallAsleep = value),
            ),
            _buildChoiceGroup(
              '今早起床用时',
              ['-10min', '10-20min', '20-60min', '60min+'],
              _timeToGetUp,
              (value) => setState(() => _timeToGetUp = value),
            ),
            _buildTextField(_sleepAbnormalitiesController, '睡眠相关异常情况 (选填)'),
            const Divider(height: 24, thickness: 1),
            _buildSlider('睡眠质量', _sleepQuality, (value) {
              setState(() => _sleepQuality = value);
            }),
            _buildSlider('LAE状态评估', _laeStatus, (value) {
              setState(() => _laeStatus = value);
            }),
            _buildSlider('运动状态评估', _exerciseStatus, (value) {
              setState(() => _exerciseStatus = value);
            }),
            _buildSlider('科研状态评估', _researchStatus, (value) {
              setState(() => _researchStatus = value);
            }),
            _buildSlider('当前焦虑水平', _anxietyLevel, (value) {
              setState(() => _anxietyLevel = value);
            }),
            _buildSlider('当前整体状态', _overallStatus, (value) {
              setState(() => _overallStatus = value);
            }),
            const Divider(height: 24, thickness: 1),
            _buildTextField(_dietController, '饮食情况'),
            _buildTextField(_notesController, '备注 (选填)'),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _submitSurvey,
              child: const Text('提交'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String label) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          border: const OutlineInputBorder(),
        ),
        // Validator is removed to make the field optional
      ),
    );
  }

  // 新增：用于单选题的通用小部件
  Widget _buildChoiceGroup(String title, List<String> options,
      String? groupValue, ValueChanged<String?> onChanged) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(title, style: Theme.of(context).textTheme.titleMedium),
          Wrap(
            spacing: 8.0,
            children: options.map((option) {
              return ChoiceChip(
                label: Text(option),
                selected: groupValue == option,
                onSelected: (selected) {
                  onChanged(selected ? option : null);
                },
              );
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildSlider(
      String title, double? value, ValueChanged<double?> onChanged) {
    // 如果值为null，则滑块显示在最左侧，但逻辑上是未选择状态
    final displayValue = value ?? 1.0;

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('$title: ${value?.toStringAsFixed(1) ?? "未选择"}',
              style: Theme.of(context).textTheme.titleMedium),
          Row(
            children: [
              Expanded(
                child: Slider(
                  value: displayValue,
                  min: 1,
                  max: 5,
                  divisions: 40, // (5-1) / 0.1 = 40
                  label: displayValue.toStringAsFixed(1),
                  onChanged: onChanged,
                ),
              ),
              // 添加一个清除按钮
              IconButton(
                icon: const Icon(Icons.clear),
                onPressed: () => onChanged(null),
                tooltip: '清除选择',
              )
            ],
          ),
        ],
      ),
    );
  }
}
