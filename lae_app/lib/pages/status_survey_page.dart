import 'package:flutter/material.dart';
import '../models/status_record.dart';
import '../services/database_helper.dart';

class StatusSurveyPage extends StatefulWidget {
  const StatusSurveyPage({super.key});

  @override
  State<StatusSurveyPage> createState() => _StatusSurveyPageState();
}

class _StatusSurveyPageState extends State<StatusSurveyPage> {
  final _formKey = GlobalKey<FormState>();

  // Controllers for text fields
  final _sleepTimeController = TextEditingController();
  final _wakeTimeController = TextEditingController();
  final _dietController = TextEditingController();
  final _notesController = TextEditingController();

  // State for ratings
  int? _sleepQuality;
  int? _laeStatus;
  int? _exerciseStatus;
  int? _researchStatus;

  // State for sliders
  double _anxietyLevel = 1.0;
  double _overallStatus = 1.0;

  @override
  void dispose() {
    // Clean up the controllers when the widget is disposed.
    _sleepTimeController.dispose();
    _wakeTimeController.dispose();
    _dietController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _submitSurvey() async {
    if (_formKey.currentState!.validate()) {
      // Add validation for rating fields
      if (_sleepQuality == null ||
          _laeStatus == null ||
          _exerciseStatus == null ||
          _researchStatus == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('请完成所有评分项')),
        );
        return;
      }

      // Create a StatusRecord object from the form data
      final record = StatusRecord(
        // id will be auto-generated by the database
        recordTime: DateTime.now(),
        sleepTime: _sleepTimeController.text,
        wakeUpTime:
            _wakeTimeController.text, // Corrected: wakeTime -> wakeUpTime
        sleepQuality: _sleepQuality!, // Corrected: Added null check
        laeState:
            _laeStatus!, // Corrected: laeStatus -> laeState, Added null check
        exerciseState:
            _exerciseStatus!, // Corrected: exerciseStatus -> exerciseState, Added null check
        researchState:
            _researchStatus!, // Corrected: researchStatus -> researchState, Added null check
        dietInfo: _dietController.text, // Corrected: diet -> dietInfo
        anxietyLevel: _anxietyLevel,
        overallState:
            _overallStatus, // Corrected: overallStatus -> overallState
        remarks: _notesController.text, // Corrected: notes -> remarks
      );

      // Save to the local database
      await DatabaseHelper.instance.insertStatusRecord(record);

      // Show a confirmation message and navigate back
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('记录已保存')),
        );
        Navigator.of(context).pop();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('每日状态问卷'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            _buildTextField(_sleepTimeController, '昨晚睡眠时间 (例如 23:30)'),
            _buildTextField(_wakeTimeController, '今早起床时间 (例如 07:00)'),
            _buildRatingRow('睡眠质量', _sleepQuality, (rating) {
              setState(() => _sleepQuality = rating);
            }),
            _buildRatingRow('LAE状态评估', _laeStatus, (rating) {
              setState(() => _laeStatus = rating);
            }),
            _buildRatingRow('运动状态评估', _exerciseStatus, (rating) {
              setState(() => _exerciseStatus = rating);
            }),
            _buildRatingRow('科研状态评估', _researchStatus, (rating) {
              setState(() => _researchStatus = rating);
            }),
            _buildTextField(_dietController, '饮食情况'),
            _buildSlider('当前焦虑水平', _anxietyLevel, (value) {
              setState(() => _anxietyLevel = value);
            }),
            _buildSlider('当前整体状态', _overallStatus, (value) {
              setState(() => _overallStatus = value);
            }),
            _buildTextField(_notesController, '备注 (选填)', isRequired: false),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _submitSurvey,
              child: const Text('提交'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String label,
      {bool isRequired = true}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          border: const OutlineInputBorder(),
        ),
        validator: isRequired
            ? (value) {
                if (value == null || value.isEmpty) {
                  return '此项为必填项';
                }
                return null;
              }
            : null,
      ),
    );
  }

  Widget _buildRatingRow(
      String title, int? groupValue, ValueChanged<int?> onChanged) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(title, style: Theme.of(context).textTheme.titleMedium),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: List.generate(5, (index) {
              final value = index + 1;
              return ChoiceChip(
                label: Text('$value'),
                selected: groupValue == value,
                onSelected: (selected) {
                  onChanged(selected ? value : null);
                },
              );
            }),
          ),
        ],
      ),
    );
  }

  Widget _buildSlider(
      String title, double value, ValueChanged<double> onChanged) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('$title: ${value.toStringAsFixed(1)}',
              style: Theme.of(context).textTheme.titleMedium),
          Slider(
            value: value,
            min: 1,
            max: 5,
            divisions: 40, // (5-1) / 0.1 = 40
            label: value.toStringAsFixed(1),
            onChanged: onChanged,
          ),
        ],
      ),
    );
  }
}
